<script>

// Javascript program for above approach

// N is the size of the 2D matrix N*N
let N = 9;

/* Takes a partially filled-in grid and attempts
	to assign values to all unassigned locations in
	such a way to meet the requirements for
	Sudoku solution (non-duplication across rows,
	columns, and boxes) */
function solveSudoku(grid, row, col)
{
	
	/* If we have reached the 8th
	row and 9th column (0
	indexed matrix) ,
	we are returning true to avoid further
	backtracking	 */
	if (row == N - 1 && col == N)
		return true;

	// Check if column value becomes 9 ,
	// we move to next row
	// and column start from 0
	if (col == N)
	{
		row++;
		col = 0;
	}

	// Check if the current position
	// of the grid already
	// contains value >0, we iterate
	// for next column
	if (grid[row][col] != 0)
		return solveSudoku(grid, row, col + 1);

	for(let num = 1; num < 10; num++)
	{
		
		// Check if it is safe to place
		// the num (1-9) in the given 
		// row ,col ->we move to next column
		if (isSafe(grid, row, col, num))
		{
			
			/* assigning the num in the current
			(row,col) position of the grid and
			assuming our assigned num in the position
			is correct */
			grid[row][col] = num;

			// Checking for next
			// possibility with next column
			if (solveSudoku(grid, row, col + 1))
				return true;
		}
		
		/* removing the assigned num , since our
		assumption was wrong , and we go for next
		assumption with diff num value */
		grid[row][col] = 0;
	}
	return false;
}


// Check whether it will be legal
// to assign num to the
// given row, col
function isSafe(grid, row, col, num)
{
	
	// Check if we find the same num
	// in the similar row , we
	// return false
	for(let x = 0; x <= 8; x++)
		if (grid[row][x] == num)
			return false;

	// Check if we find the same num
	// in the similar column ,
	// we return false
	for(let x = 0; x <= 8; x++)
		if (grid[x][col] == num)
			return false;

	// Check if we find the same num
	// in the particular 3*3
	// matrix, we return false
	let startRow = row - row % 3, 
		startCol = col - col % 3;
		
	for(let i = 0; i < 3; i++)
		for(let j = 0; j < 3; j++)
			if (grid[i + startRow][j + startCol] == num)
				return false;

	return true;
}

// Driver Code
let grid = [
             [ 3, 0, 6, 5, 0, 8, 4, 0, 0 ],
	     [ 5, 2, 0, 0, 0, 0, 0, 0, 0 ],
	     [ 0, 8, 7, 0, 0, 0, 0, 3, 1 ],
   	     [ 0, 0, 3, 0, 1, 0, 0, 8, 0 ],
	     [ 9, 0, 0, 8, 6, 3, 0, 0, 5 ],
	     [ 0, 5, 0, 0, 9, 0, 6, 0, 0 ],
	     [ 1, 3, 0, 0, 0, 0, 2, 5, 0 ],
	     [ 0, 0, 0, 0, 0, 0, 0, 7, 4 ],
	     [ 0, 0, 5, 2, 0, 6, 3, 0, 0 ]
 ]

*****************************************

transform (puzzleString) {

let grid =  [
             [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
	     [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
	     [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
   	     [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
	     [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
	     [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
	     [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
	     [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
	     [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
 ];

let row = -1;
let col = 0;
for (let i = 0; i < puzzleString.length; i++ {
    if (i%9 == 0) {
      row++;
    }
    if (col % 9 == 0) {
      col = 0;
    }

    grid[row][col] = puzzleString[i] === "." ? 0 : +puzzelString[i];
    col++;
    }
    return grid;
}


******************************************











if (solveSudoku(grid, 0, 0))
	print(grid)
else
	document.write("no solution exists ")

// This code is contributed by rag2127

</script>

****************************** api checks ********************

app.route("/app/check").post((req, res) => {

    const { puzzle, coordinate, value } = req.body;
    if (!puzzle || !coordinate || !value) {
         res.json({ error: "Required field(s) missing"});
         return;
    }
    
     const row = coordinate.split("")[0];
     const column = coordinate.split("")[1];

     if ( coordinate.length !== 2 || !/[a-i]/i.test(row) || !/[1-9]/i.test(column)) {
        console.log("Invalid coordinate");
        res.json({ error: "Invalid coordinate"});
        return;
     }

     if ( !/[1-9]i.test(value)) {
        res.json({ error: "Invalid value"});
        return;
     } 
     
     if (puzzle.length != 81) {
         res.json({ error: "Expected puzzle to be 81 characters long" });
         return;  
     }

     if (/[^0-9.]/g.test(puzzle)) {
        res.json({ error: "Invalid character(s) in puzzle" });
        return;
     }

     /////////////////////// Check rows and columns:

    let validColumn = solver.checkColPlacement(puzzle, row, column, value);
    let validRegion = solver.checkRegionPlacement(puzzle, row, column, value);
    let validRow = solver.checkColPlacement(puzzle, row, column, value); 
    let conflicts = [];
   
    if( validColumn && validRegion && validRow ) {
        res.json({ valid: true });
    } else { 
        if (!validRow){
         conflicts.push("row");
    } 

     if( !validColumn ) {
       conflicts.push("column");
     } 

     if( !validRegion) {
        conflicts.push("region");
     }

     res.json({ valid: false, conflicts: conflicts }); 
    }

});

// ******** All the folowing code to be inside PuzzleSolver class

letterToNumber(row) {
  let rowNum;  
    switch (row.toUpperCase()) {
       case "A": 
         rowNum = 1;
         break;
       case "B":
         rowNum = 2;
         break;
       case "C": 
         rowNum = 3;
         break;
       case "D":
         rowNum = 4;
         break;
       case "E": 
         rowNum =5;
         break;
       case "F":
         rowNum = 6;
         break;
        case "G": 
         rowNum = 7;
         break;
       case "H":
         rowNum = 8;
         break;
       case "I":
         rowNum = 9;
         break;
       default:
         return "Invalid letterToNumber";
    }
    return rowNum;
}


// check row placement
checkRowPlacement (puzzleString, row, column, value) {
    let grid = this.transform(puzzleString);
    row = this.letterToNumber(row);
    if( grid[row - 1][column - 1] !== 0) {
       return false;
    }
    for ( let i = 0; i < 9; i++ ) {
        if( grid[row - 1][i] == value ) {
           return false
        }
    }
    return true;
}


// check column placement
checkColumnPlacement (puzzleString, row, column, value) {
    let grid = this.transform(puzzleString);
    row = this.letterToNumber(row);
    if( grid[row - 1][column - 1] !== 0) {
       return false;
    }
    for ( let i = 0; i < 9; i++ ) {
        if( grid[i][column - 1] == value ) {
           return false
        }
    }
    return true;
}

// check region placement

checkRegionPlacement (puzzleString, row, column, value) {
    let grid = this.transform(puzzleString);
    row = this.letterToNumber(row);
    if( grid[row - 1][column - 1] !== 0) {
       return false;
    }
    let startRow = row - (row % 3),
     startColumn = column - ( column % 3);
    for(let i = 0; i < 3; i++) 
        for(let j = 0; j < 3; j++)
            if( grid[ i + startRow ][ j + startColumn ] == value)
                  return false;
     return true;
}

 //// ************** end of position tests


// route "/api/check"  additional code to run checks


































